#pragma checksum "C:\Users\29462\Desktop\医疗后台管理系统全部\医疗管理前端\框架搭建\Views\Home\Role.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "2c73acf6cdace201b7dfdebd210ec9d1403c5276"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Home_Role), @"mvc.1.0.view", @"/Views/Home/Role.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "C:\Users\29462\Desktop\医疗后台管理系统全部\医疗管理前端\框架搭建\Views\_ViewImports.cshtml"
using 框架搭建;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\29462\Desktop\医疗后台管理系统全部\医疗管理前端\框架搭建\Views\_ViewImports.cshtml"
using 框架搭建.Models;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"2c73acf6cdace201b7dfdebd210ec9d1403c5276", @"/Views/Home/Role.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"a0ac46f3312d6d7123008a0b569db4259333fc07", @"/Views/_ViewImports.cshtml")]
    public class Views_Home_Role : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_0 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("href", new global::Microsoft.AspNetCore.Html.HtmlString("~/css/main.css"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_1 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("rel", new global::Microsoft.AspNetCore.Html.HtmlString("stylesheet"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_2 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("href", new global::Microsoft.AspNetCore.Html.HtmlString("~/lib/bootstrap/dist/css/bootstrap.css"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_3 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("href", new global::Microsoft.AspNetCore.Html.HtmlString("~/lib/element-ui/theme-chalk/index.css"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_4 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/lib/vue/vue.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        #line hidden
        #pragma warning disable 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        #pragma warning restore 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.HeadTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper;
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper;
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.BodyTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            WriteLiteral("\r\n");
#nullable restore
#line 2 "C:\Users\29462\Desktop\医疗后台管理系统全部\医疗管理前端\框架搭建\Views\Home\Role.cshtml"
  
    Layout = null;

#line default
#line hidden
#nullable disable
            WriteLiteral("\r\n<!DOCTYPE html>\r\n\r\n<html>\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("head", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "2c73acf6cdace201b7dfdebd210ec9d1403c52765376", async() => {
                WriteLiteral("\r\n    <meta name=\"viewport\" content=\"width=device-width\" />\r\n    <title>角色管理</title>\r\n    ");
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("link", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "2c73acf6cdace201b7dfdebd210ec9d1403c52765730", async() => {
                }
                );
                __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_0);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_1);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                WriteLiteral("\r\n    ");
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("link", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "2c73acf6cdace201b7dfdebd210ec9d1403c52766908", async() => {
                }
                );
                __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_2);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_1);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                WriteLiteral("\r\n    ");
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("link", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "2c73acf6cdace201b7dfdebd210ec9d1403c52768086", async() => {
                }
                );
                __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_3);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_1);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                WriteLiteral("\r\n    ");
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "2c73acf6cdace201b7dfdebd210ec9d1403c52769264", async() => {
                }
                );
                __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_4);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                WriteLiteral("\r\n    <script src=\"//unpkg.com/element-ui@2.15.1/lib/index.js\"></script>\r\n    <script src=\"https://unpkg.com/axios/dist/axios.min.js\"></script>\r\n");
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.HeadTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("body", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "2c73acf6cdace201b7dfdebd210ec9d1403c527611218", async() => {
                WriteLiteral(@"
    <div id=""app"">
        <el-button type=""success"" v-on:click=""AddFormVisible = true"">添加</el-button>
        <el-button type=""danger"" v-on:click=""AllDel"" plain>批量删除</el-button>
        <el-button type=""success"" v-on:click=""allotJur"">分配权限</el-button>
        <el-button type=""success"" v-on:click=""allotUser"">分配角色</el-button>
        <!--显示表格-->
        <template>
            <input type=""hidden"" v-model=""form.user_photo"" />
            <el-table :data=""tableData.filter(data => !search || data.role_Name.toLowerCase().includes(search.toLowerCase()))""
                      ");
                WriteLiteral(@"@selection-change=""handleSelectionChange""
                      style=""width: 100%"" v-loading=""loading"">
                <el-table-column type=""selection""
                                 width=""55"">
                </el-table-column>
                <el-table-column type=""index""
                                 :index=""indexMethod"">
                </el-table-column>
                <el-table-column label=""角色名称""
                                 width=""180"">
                    <template slot-scope=""scope"">
                        <span style=""margin-left: 10px"">{{ scope.row.role_Name }}</span>
                    </template>
                </el-table-column>
                <el-table-column label=""角色描述""
                                 width=""180"">
                    <template slot-scope=""scope"">
                        <span style=""margin-left: 10px"">{{ scope.row.role_Describe }}</span>
                    </template>
                </el-table-column>

                <el-table-colum");
                WriteLiteral(@"n label=""操作"">
                    <template slot=""header"" slot-scope=""scope"">
                        <el-input v-model=""search""
                                  size=""mini""
                                  placeholder=""输入关键字搜索角色"" />
                    </template>
                    <template slot-scope=""scope"">
                        <el-button size=""mini""
                                   ");
                WriteLiteral("@click=\"handleEdit(scope.$index, scope.row)\">编辑</el-button>\r\n                        <el-button size=\"mini\"\r\n                                   type=\"danger\"\r\n                                   ");
                WriteLiteral(@"@click=""handleDelete(scope.$index, scope.row)"">删除</el-button>
                        <el-popover placement=""right""
                                    width=""400""
                                    trigger=""click"">
                            <el-table :data=""gridData"">
                                <el-table-column width=""150"" property=""user_Account"" label=""用户账号""></el-table-column>
                                <el-table-column prop=""user_photo"" label=""用户头像"" width=""180"">
                                    <!--加入下面的内容,scope.row代表这一行,img是显示这一行的哪个字段,我的是img,你的自己看下-->
                                    <template slot-scope=""scope"">
                                        <img :src=""scope.row.user_photo"" width=""80"" height=""80""");
                BeginWriteAttribute("alt", " alt=\"", 3525, "\"", 3531, 0);
                EndWriteAttribute();
                WriteLiteral(">\r\n                                    </template>\r\n                                </el-table-column>\r\n                            </el-table>\r\n                            <el-button size=\"mini\" slot=\"reference\" ");
                WriteLiteral(@"@click=""User(scope.$index, scope.row)"">旗下用户</el-button>
                        </el-popover>
                        <el-popover placement=""right""
                                    width=""400""
                                    trigger=""click"">
                            <el-table :data=""gridData"">
                                <el-table-column width=""150"" property=""jur_Name"" label=""权限名称""></el-table-column>
                                <el-table-column width=""150"" property=""jur_describe"" label=""权限描述""></el-table-column>
                            </el-table>
                            <el-button size=""mini"" slot=""reference"" ");
                WriteLiteral(@"@click=""Jur(scope.$index, scope.row)"">具有的权限</el-button>
                        </el-popover>
                    </template>
                </el-table-column>
            </el-table>
            <!--分页-->
            <div class=""block"">
                <el-pagination ");
                WriteLiteral("@size-change=\"handleSizeChange\"\r\n                               ");
                WriteLiteral(@"@current-change=""handleCurrentChange""
                               background
                               :current-page=""page""
                               :page-sizes=""[3, 6, 9, 20]""
                               :hide-on-single-page=""value""
                               :page-size=""limit""
                               layout=""total, sizes, prev, pager, next, jumper""
                               :total=""total"">
                </el-pagination>
            </div>
        </template>
        <!--添加弹出窗-->
        <el-dialog title=""添加角色"" :visible.sync=""AddFormVisible"" ");
                WriteLiteral(@"@close='cloneWindows'>
            <el-form :model=""form"" ref=""form"">
                <el-form-item label=""角色名称"" :label-width=""formLabelWidth""
                              :rules=""[{ required: true, message: '角色名称不能为空'}]""
                              prop=""role_Name"">
                    <el-input v-model=""form.role_Name"" autocomplete=""off""></el-input>
                </el-form-item>
                <el-form-item label=""角色描述"" :label-width=""formLabelWidth"" :rules=""[{ required: true, message: '角色描述不能为空'}]"" prop=""role_Describe"">
                    <el-input v-model=""form.role_Describe"" autocomplete=""off""></el-input>
                </el-form-item>
                <el-form-item label=""角色序号"" :label-width=""formLabelWidth"">
                    <el-input-number v-model=""form.role_sort"" :min=""0"" :max=""10"" label=""描述文字""></el-input-number>
                </el-form-item>
            </el-form>
            <div slot=""footer"" class=""dialog-footer"">
                <el-button ");
                WriteLiteral("@click=\"cloneWindows\">取 消</el-button>\r\n                <el-button type=\"primary\" ");
                WriteLiteral("@click=\"handleAdd(\'form\')\">确 定</el-button>\r\n            </div>\r\n        </el-dialog>\r\n        <!--编辑弹出窗-->\r\n        <el-dialog title=\"修改角色\" :visible.sync=\"PutFormVisible\" ");
                WriteLiteral(@"@close='cloneWindows'>
            <el-form :model=""form"" ref=""form"">
                <input type=""hidden"" v-model=""form.role_Id"" />
                <el-form-item label=""角色名称"" :label-width=""formLabelWidth""
                              :rules=""[{ required: true, message: '角色名称不能为空'}]""
                              prop=""role_Name"">
                    <el-input v-model=""form.role_Name"" autocomplete=""off""></el-input>
                </el-form-item>
                <el-form-item label=""角色描述"" :label-width=""formLabelWidth"" :rules=""[{ required: true, message: '角色描述不能为空'}]"" prop=""role_Describe"">
                    <el-input v-model=""form.role_Describe"" autocomplete=""off""></el-input>
                </el-form-item>
                <el-form-item label=""角色序号"" :label-width=""formLabelWidth"">
                    <el-input-number v-model=""form.role_sort"" :min=""0"" :max=""10"" label=""描述文字""></el-input-number>
                </el-form-item>
            </el-form>
            <div slot=""footer"" class=""dialog-foo");
                WriteLiteral("ter\">\r\n                <el-button ");
                WriteLiteral("@click=\"cloneWindows\">取 消</el-button>\r\n                <el-button type=\"primary\" ");
                WriteLiteral("@click=\"saveEdit(\'form\')\">确 定</el-button>\r\n            </div>\r\n        </el-dialog>\r\n        <!--分配权限-->\r\n        <el-dialog title=\"分配权限\" :visible.sync=\"JurFormVisible\">\r\n            <el-table :data=\"jurData\"\r\n                      ");
                WriteLiteral(@"@selection-change=""handleSelectionChange"">
                <el-table-column type=""selection""
                                 width=""55"">
                </el-table-column>
                <el-table-column width=""150"" property=""jur_Name"" label=""权限名称""></el-table-column>
                <el-table-column width=""150"" property=""jur_describe"" label=""权限描述""></el-table-column>
            </el-table>
            <div slot=""footer"" class=""dialog-footer"">
                <el-button type=""primary"" ");
                WriteLiteral("@click=\"saveallotJur(\'form\')\">确 定</el-button>\r\n            </div>\r\n        </el-dialog>\r\n        <!--分配用户-->\r\n        <el-dialog title=\"分配用户\" :visible.sync=\"UserFormVisible\">\r\n            <el-table :data=\"addData\"\r\n                      ");
                WriteLiteral(@"@selection-change=""handleSelectionChange"">
                <el-table-column type=""selection""
                                 width=""55"">
                </el-table-column>
                <el-table-column width=""150"" property=""user_Account"" label=""用户账号""></el-table-column>
                <el-table-column prop=""user_photo"" label=""用户头像"" width=""180"">
                    <!--加入下面的内容,scope.row代表这一行,img是显示这一行的哪个字段,我的是img,你的自己看下-->
                    <template slot-scope=""scope"">
                        <img :src=""scope.row.user_photo"" width=""80"" height=""80""");
                BeginWriteAttribute("alt", " alt=\"", 9267, "\"", 9273, 0);
                EndWriteAttribute();
                WriteLiteral(">\r\n                    </template>\r\n                </el-table-column>\r\n            </el-table>\r\n            <div slot=\"footer\" class=\"dialog-footer\">\r\n                <el-button type=\"primary\" ");
                WriteLiteral("@click=\"saveallotUser(\'form\')\">确 定</el-button>\r\n            </div>\r\n        </el-dialog>\r\n    </div>\r\n");
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.BodyTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
</html>
<script>

    var app = new Vue({
        el: ""#app"",
        data() {
            return {
                gridData: [],
                tableData: [],//显示的表格
                loading: true,//加载动画
                jurData: [],//权限显示的表格
                addData: [],//用户显示的表格
                search: """",//搜索条件
                JurFormVisible: false,//分配权限弹出层
                UserFormVisible: false,//分配用户弹出层
                AddFormVisible: false,//添加弹出层，默认隐藏
                PutFormVisible: false,//修改弹出层，默认隐藏
                form: {
                    role_Name: """",
                    role_Describe: """",
                    role_sort: """",
                },     //添加的表单
                multipleSelection: [],//多选时选中的数据保存处
                value: true,//只有一页时是否隐藏
                formLabelWidth: '120px',//表单的长度
                imageUrl: """",//图片预览的路径
                page: 1,//当前页数
                limit: 3,//每页个数
                total: 30,//总条数
                AllDelis: true,//批量删除按钮是否");
            WriteLiteral(@"可见
                flag: """",//存权限ID
            }
        },

        //显示
        mounted: function () {
            this.loaddata();
        },
        methods: {
            User: function (index, row) {
                axios.get('http://localhost:10627/api/User/GetRole_User', {
                    params: {
                        RoleId: row.role_Id,
                    }
                }).then(response => {
                    this.gridData = response.data.result;
                    console.log(this.gridData)
                }).catch(function (error) {
                    console.log(error)
                })
            },
            Jur: function (index, row) {
                axios.get('http://localhost:10627/api/User/GetRole_Jur', {
                    params: {
                        RoleId: row.role_Id,
                    }
                }).then(response => {
                    this.gridData = response.data.result;
                    console.log(this.gridData)");
            WriteLiteral(@"
                }).catch(function (error) {
                    console.log(error)
                })
            },
            //分配权限
            allotJur: function () {
                if (this.multipleSelection.length == 0) {
                    this.$message.error('您未选中任何数据！');
                }
                else if (this.multipleSelection.length > 1)
                    this.$message.error('请选择单个角色分配权限！');
                else {
                    this.flag = this.multipleSelection[0].role_Id;
                    axios.get('http://localhost:10627/api/User/GetRole_Jur', {
                    }).then(response => {
                        this.jurData = response.data.result;
                    }).catch(function (error) {
                        console.log(error)
                    })
                    this.JurFormVisible = true;
                }
                this.multipleSelection = null;
            },
            //保存分配的权限
            saveallotJur: function () {
  ");
            WriteLiteral(@"              if (this.multipleSelection.length == 0) {
                    this.$message.error('您未选中任何数据！');
                }
                else {
                    var str = this.flag + ""-"";
                    this.multipleSelection.forEach(row => {
                        str += "","" + row.jur_Id;
                    });
                    console.log(str)
                    this.$confirm('您将分配个权限, 是否继续?', '提示', {
                        confirmButtonText: '确定',
                        cancelButtonText: '取消',
                        type: 'warning'
                    }).then(() => {
                        axios.delete('http://localhost:10627/api/User/RoleAddJur', {
                            params: {
                                id: str,
                            }
                        }).then(response => {
                            if (response.data) {
                                this.$notify({
                                    title: '权限分配成功',
            ");
            WriteLiteral(@"                        message: '分配权限：成功！',
                                    type: 'success'
                                });
                                this.JurFormVisible = false;
                            } else {
                                this.$message.error('权限分配失败')
                            }
                            this.flag = null;
                        }).catch(function (error) {
                            console.log(error)
                        })
                    })
                }
                this.multipleSelection = null;
            },
            //分配用户
            allotUser: function () {
                if (this.multipleSelection.length == 0) {
                    this.$message.error('您未选中任何数据！');
                }
                else if (this.multipleSelection.length > 1)
                    this.$message.error('请选择单个角色分配用户！');
                else {
                    this.flag = this.multipleSelection[0].role_Id;
         ");
            WriteLiteral(@"           axios.get('http://localhost:10627/api/User/GetRole_User', {
                    }).then(response => {
                        this.addData = response.data.result;
                    }).catch(function (error) {
                        console.log(error)
                    })
                    this.UserFormVisible = true;
                }
                this.multipleSelection = null;
            },
            //保存分配的用户
            saveallotUser: function () {
                if (this.multipleSelection.length == 0) {
                    this.$message.error('您未选中任何数据！');
                }
                else {
                    var str = this.flag + ""-"";
                    this.multipleSelection.forEach(row => {
                        str += "","" + row.use_Id;
                    });
                    console.log(str)
                    this.$confirm('您将分配个用户, 是否继续?', '提示', {
                        confirmButtonText: '确定',
                        cancelButtonText: ");
            WriteLiteral(@"'取消',
                        type: 'warning'
                    }).then(() => {
                        axios.delete('http://localhost:10627/api/User/RoleAddUser', {
                            params: {
                                id: str,
                            }
                        }).then(response => {
                            if (response.data) {
                                this.$notify({
                                    title: '用户分配成功',
                                    message: '分配用户：成功！',
                                    type: 'success'
                                });
                                this.UserFormVisible = false;
                            } else {
                                this.$message.error('分配失败')
                            }
                        }).catch(function (error) {
                            console.log(error)
                        })
                    })
                }
                this.multipl");
            WriteLiteral(@"eSelection = null;
                this.flag = null;
            },
            //加载数据方法
            loaddata: function () {
                axios.get('http://localhost:10627/api/User/GetRole', {
                    params: {
                        page: this.page,
                        limit: this.limit,
                    }
                }).then(response => {
                    this.tableData = response.data.result;
                    this.total = response.data.total;
                    this.loading = false;
                }).catch(function (error) {
                    console.log(error)
                })
            },
            //添加
            handleAdd(formName) {
                this.$refs[formName].validate((valid) => {
                    if (valid) {
                        axios({
                            url: 'http://localhost:10627/api/User/AddRole',
                            method: 'post',
                            data: JSON.stringify(this.form),
");
            WriteLiteral(@"                            headers: {
                                'Content-type': 'application/json'
                            }
                        }).then(response => {
                            if (response.data.code = 1) {
                                this.$message.error('角色名称是重复的！');
                            }
                            else if (response.data.code == 2) {
                                this.AddFormVisible = false;//关闭弹出框
                                this.loaddata();
                                this.$notify({
                                    title: '新增成功',
                                    message: '新增角色：' + this.form.role_Name + ""成功！"",
                                    type: 'success'
                                });
                            }
                            else {
                                this.$message.error('新增失败');
                            }
                            this.role_Name = '';
            ");
            WriteLiteral(@"                this.role_sort = '';
                            this.role_Describe = '';
                        }).catch(error => {
                            console.log(error)
                        })
                    } else {
                        this.$message.error('请您仔细核对后再提交！');
                        return false;
                    }
                });
            },
            //修改弹框反填
            handleEdit(index, row) {//index为当前行的索引，row为当前行，可以获得当前行的数据
                this.form.role_Name = row.role_Name;
                this.form.role_Describe = row.role_Describe;
                this.form.role_sort = row.role_sort;
                this.form.role_Id = row.role_Id;
                this.PutFormVisible = true;
            },
            //保存修改
            saveEdit(formName) {
                this.$refs[formName].validate((valid) => {
                    if (valid) {
                        axios({
                            url: 'http://localhost:10627/api/User/");
            WriteLiteral(@"PutRole',
                            method: 'put',
                            data: JSON.stringify(this.form),
                            headers: {
                                'Content-type': 'application/json'
                            }
                        }).then(response => {
                            if (response.data.code = 1) {
                                this.$message.error('角色名称是重复的！');
                            }
                            else if (response.data.code == 2) {
                                this.AddFormVisible = false;//关闭弹出框
                                this.loaddata();
                                this.$notify({
                                    title: '修改成功',
                                    message: '修改角色：' + this.form.role_Name + ""成功！"",
                                    type: 'success'
                                });
                            }
                            this.role_Name = '';
                        ");
            WriteLiteral(@"    this.role_Describe = '';
                            this.role_sort = '';
                        }).catch(error => {
                            this.cloneWindows();
                        })
                    } else {
                        this.$message.error('请您仔细核对后再提交！');
                        return false;
                    }
                });

            },
            //点击关闭按钮后
            cloneWindows() {
                this.AddFormVisible = false;
                this.PutFormVisible = false;
                this.role_Name = '';
                this.role_Describe = '';
                this.role_sort = '';
            },
            //删除操作
            handleDelete(index, row) {
                this.$confirm('此操作将永久删除该文件, 是否继续?', '提示', {
                    confirmButtonText: '确定',
                    cancelButtonText: '取消',
                    type: 'warning'
                }).then(() => {
                    axios.delete('http://localhost:10627/api/User/De");
            WriteLiteral(@"lRole', {
                        params: {
                            id: ("","" + row.role_Id),
                        }
                    }).then(response => {
                        if (response.data) {
                            this.$nextTick(() => console.log(""删除成功！""));
                            this.loaddata();
                            this.$notify({
                                title: '删除成功',
                                message: '删除角色：' + row.role_Name + ""成功！"",
                                type: 'success'
                            });
                        } else {
                            this.$message.error('删除失败')
                        }
                    }).catch(function (error) {
                        console.log(error)
                    })

                }).catch(() => {
                    this.$message({
                        type: 'info',
                        message: '已取消删除'
                    });
                });
     ");
            WriteLiteral(@"       },
            //批量删除
            AllDel() {
                if (this.multipleSelection.length == 0)
                    this.$message.error('您未选中任何数据！');
                else {
                    var str = """";
                    var Names = """";
                    this.multipleSelection.forEach(row => {
                        str += "","" + row.role_Id;
                        Names += "","" + row.role_Name;
                    });
                    this.$confirm('此操作将永久删除所有选中的文件, 是否继续?', '提示', {
                        confirmButtonText: '确定',
                        cancelButtonText: '取消',
                        type: 'warning'
                    }).then(() => {
                        axios.delete('http://localhost:10627/api/User/DelRole', {
                            params: {
                                id: str,
                            }
                        }).then(response => {
                            if (response.data) {
                               ");
            WriteLiteral(@" this.loaddata();
                                this.$notify({
                                    title: '删除成功',
                                    message: '删除角色：' + Names.substring(1) + ""   成功！"",
                                    type: 'success'
                                });
                            } else {
                                this.$message.error('删除失败')
                            }
                        }).catch(function (error) {
                            console.log(error)
                        })

                    }).catch(() => {
                        this.$message({
                            type: 'info',
                            message: '已取消删除'
                        });
                    });
                }
            },
            //显示序号
            indexMethod(index) {
                return index + 1;
            },
            //多选框
            handleSelectionChange(val) {
                this.multipleSelection = nul");
            WriteLiteral(@"l;
                this.multipleSelection = val;
            },
            // 当前页改变触发事件 val为当前选择页
            handleSizeChange(val) {
                this.limit = val;
                this.loaddata();
            },
            //每页显示条数改变触发事件 val为当前每页显示条数
            handleCurrentChange(val) {
                this.page = val;
                this.loaddata();
            }
        },
    });

</script>");
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
